{"ast":null,"code":"/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\nimport * as math from './math.js';\nimport * as binary from './binary.js';\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER;\nexport const LOWEST_INT32 = 1 << 31;\nexport const HIGHEST_INT32 = binary.BITS31;\nexport const HIGHEST_UINT32 = binary.BITS32;\n\n/* c8 ignore next */\nexport const isInteger = Number.isInteger || (num => typeof num === 'number' && isFinite(num) && math.floor(num) === num);\nexport const isNaN = Number.isNaN;\nexport const parseInt = Number.parseInt;\n\n/**\n * Count the number of \"1\" bits in an unsigned 32bit number.\n *\n * Super fun bitcount algorithm by Brian Kernighan.\n *\n * @param {number} n\n */\nexport const countBits = n => {\n  n &= binary.BITS32;\n  let count = 0;\n  while (n) {\n    n &= n - 1;\n    count++;\n  }\n  return count;\n};","map":{"version":3,"names":["math","binary","MAX_SAFE_INTEGER","Number","MIN_SAFE_INTEGER","LOWEST_INT32","HIGHEST_INT32","BITS31","HIGHEST_UINT32","BITS32","isInteger","num","isFinite","floor","isNaN","parseInt","countBits","n","count"],"sources":["/Users/cmahidhrahrajendran/Projects/YJS-trial/frontend/node_modules/lib0/number.js"],"sourcesContent":["/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\nimport * as math from './math.js'\nimport * as binary from './binary.js'\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER\n\nexport const LOWEST_INT32 = 1 << 31\nexport const HIGHEST_INT32 = binary.BITS31\nexport const HIGHEST_UINT32 = binary.BITS32\n\n/* c8 ignore next */\nexport const isInteger = Number.isInteger || (num => typeof num === 'number' && isFinite(num) && math.floor(num) === num)\nexport const isNaN = Number.isNaN\nexport const parseInt = Number.parseInt\n\n/**\n * Count the number of \"1\" bits in an unsigned 32bit number.\n *\n * Super fun bitcount algorithm by Brian Kernighan.\n *\n * @param {number} n\n */\nexport const countBits = n => {\n  n &= binary.BITS32\n  let count = 0\n  while (n) {\n    n &= (n - 1)\n    count++\n  }\n  return count\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,IAAI,MAAM,WAAW;AACjC,OAAO,KAAKC,MAAM,MAAM,aAAa;AAErC,OAAO,MAAMC,gBAAgB,GAAGC,MAAM,CAACD,gBAAgB;AACvD,OAAO,MAAME,gBAAgB,GAAGD,MAAM,CAACC,gBAAgB;AAEvD,OAAO,MAAMC,YAAY,GAAG,CAAC,IAAI,EAAE;AACnC,OAAO,MAAMC,aAAa,GAAGL,MAAM,CAACM,MAAM;AAC1C,OAAO,MAAMC,cAAc,GAAGP,MAAM,CAACQ,MAAM;;AAE3C;AACA,OAAO,MAAMC,SAAS,GAAGP,MAAM,CAACO,SAAS,KAAKC,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIC,QAAQ,CAACD,GAAG,CAAC,IAAIX,IAAI,CAACa,KAAK,CAACF,GAAG,CAAC,KAAKA,GAAG,CAAC;AACzH,OAAO,MAAMG,KAAK,GAAGX,MAAM,CAACW,KAAK;AACjC,OAAO,MAAMC,QAAQ,GAAGZ,MAAM,CAACY,QAAQ;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGC,CAAC,IAAI;EAC5BA,CAAC,IAAIhB,MAAM,CAACQ,MAAM;EAClB,IAAIS,KAAK,GAAG,CAAC;EACb,OAAOD,CAAC,EAAE;IACRA,CAAC,IAAKA,CAAC,GAAG,CAAE;IACZC,KAAK,EAAE;EACT;EACA,OAAOA,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}