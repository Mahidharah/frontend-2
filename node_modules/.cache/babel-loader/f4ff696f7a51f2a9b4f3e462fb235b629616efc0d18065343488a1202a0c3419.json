{"ast":null,"code":"/**\n * Observable class prototype.\n *\n * @module observable\n */\n\nimport * as map from './map.js';\nimport * as set from './set.js';\nimport * as array from './array.js';\n\n/**\n * Handles named events.\n * @experimental\n *\n * This is basically a (better typed) duplicate of Observable, which will replace Observable in the\n * next release.\n *\n * @template {{[key in keyof EVENTS]: function(...any):void}} EVENTS\n */\nexport class ObservableV2 {\n  constructor() {\n    /**\n     * Some desc.\n     * @type {Map<string, Set<any>>}\n     */\n    this._observers = map.create();\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  on(name, f) {\n    map.setIfUndefined(this._observers, /** @type {string} */name, set.create).add(f);\n    return f;\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  once(name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, /** @type {any} */_f);\n      f(...args);\n    };\n    this.on(name, /** @type {any} */_f);\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  off(name, f) {\n    const observers = this._observers.get(name);\n    if (observers !== undefined) {\n      observers.delete(f);\n      if (observers.size === 0) {\n        this._observers.delete(name);\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name The event name.\n   * @param {Parameters<EVENTS[NAME]>} args The arguments that are applied to the event listener.\n   */\n  emit(name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args));\n  }\n  destroy() {\n    this._observers = map.create();\n  }\n}\n\n/* c8 ignore start */\n/**\n * Handles named events.\n *\n * @deprecated\n * @template N\n */\nexport class Observable {\n  constructor() {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = map.create();\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on(name, f) {\n    map.setIfUndefined(this._observers, name, set.create).add(f);\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once(name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f);\n      f(...args);\n    };\n    this.on(name, _f);\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off(name, f) {\n    const observers = this._observers.get(name);\n    if (observers !== undefined) {\n      observers.delete(f);\n      if (observers.size === 0) {\n        this._observers.delete(name);\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit(name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args));\n  }\n  destroy() {\n    this._observers = map.create();\n  }\n}\n/* c8 ignore end */","map":{"version":3,"names":["map","set","array","ObservableV2","constructor","_observers","create","on","name","f","setIfUndefined","add","once","_f","args","off","observers","get","undefined","delete","size","emit","from","values","forEach","destroy","Observable"],"sources":["/Users/cmahidhrahrajendran/Projects/YJS-trial/frontend/node_modules/lib0/observable.js"],"sourcesContent":["/**\n * Observable class prototype.\n *\n * @module observable\n */\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as array from './array.js'\n\n/**\n * Handles named events.\n * @experimental\n *\n * This is basically a (better typed) duplicate of Observable, which will replace Observable in the\n * next release.\n *\n * @template {{[key in keyof EVENTS]: function(...any):void}} EVENTS\n */\nexport class ObservableV2 {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<string, Set<any>>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, /** @type {string} */ (name), set.create).add(f)\n    return f\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, /** @type {any} */ (_f))\n      f(...args)\n    }\n    this.on(name, /** @type {any} */ (_f))\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name The event name.\n   * @param {Parameters<EVENTS[NAME]>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n\n/* c8 ignore start */\n/**\n * Handles named events.\n *\n * @deprecated\n * @template N\n */\nexport class Observable {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, name, set.create).add(f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f)\n      f(...args)\n    }\n    this.on(name, _f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n/* c8 ignore end */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}