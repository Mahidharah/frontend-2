{"ast":null,"code":"import * as symbol from './symbol.js';\nimport * as time from './time.js';\nimport * as env from './environment.js';\nimport * as func from './function.js';\nimport * as json from './json.js';\nexport const BOLD = symbol.create();\nexport const UNBOLD = symbol.create();\nexport const BLUE = symbol.create();\nexport const GREY = symbol.create();\nexport const GREEN = symbol.create();\nexport const RED = symbol.create();\nexport const PURPLE = symbol.create();\nexport const ORANGE = symbol.create();\nexport const UNCOLOR = symbol.create();\n\n/* c8 ignore start */\n/**\n * @param {Array<undefined|string|Symbol|Object|number|function():any>} args\n * @return {Array<string|object|number|undefined>}\n */\nexport const computeNoColorLoggingArgs = args => {\n  if (args.length === 1 && args[0]?.constructor === Function) {\n    args = /** @type {Array<string|Symbol|Object|number>} */ /** @type {[function]} */args[0]();\n  }\n  const strBuilder = [];\n  const logArgs = [];\n  // try with formatting until we find something unsupported\n  let i = 0;\n  for (; i < args.length; i++) {\n    const arg = args[i];\n    if (arg === undefined) {\n      break;\n    } else if (arg.constructor === String || arg.constructor === Number) {\n      strBuilder.push(arg);\n    } else if (arg.constructor === Object) {\n      break;\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs.push(strBuilder.join(''));\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i];\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg);\n    }\n  }\n  return logArgs;\n};\n/* c8 ignore stop */\n\nconst loggingColors = [GREEN, PURPLE, ORANGE, BLUE];\nlet nextColor = 0;\nlet lastLoggingTime = time.getUnixTime();\n\n/* c8 ignore start */\n/**\n * @param {function(...any):void} _print\n * @param {string} moduleName\n * @return {function(...any):void}\n */\nexport const createModuleLogger = (_print, moduleName) => {\n  const color = loggingColors[nextColor];\n  const debugRegexVar = env.getVariable('log');\n  const doLogging = debugRegexVar !== null && (debugRegexVar === '*' || debugRegexVar === 'true' || new RegExp(debugRegexVar, 'gi').test(moduleName));\n  nextColor = (nextColor + 1) % loggingColors.length;\n  moduleName += ': ';\n  return !doLogging ? func.nop : (...args) => {\n    if (args.length === 1 && args[0]?.constructor === Function) {\n      args = args[0]();\n    }\n    const timeNow = time.getUnixTime();\n    const timeDiff = timeNow - lastLoggingTime;\n    lastLoggingTime = timeNow;\n    _print(color, moduleName, UNCOLOR, ...args.map(arg => {\n      if (arg != null && arg.constructor === Uint8Array) {\n        arg = Array.from(arg);\n      }\n      const t = typeof arg;\n      switch (t) {\n        case 'string':\n        case 'symbol':\n          return arg;\n        default:\n          {\n            return json.stringify(arg);\n          }\n      }\n    }), color, ' +' + timeDiff + 'ms');\n  };\n};\n/* c8 ignore stop */","map":{"version":3,"names":["symbol","time","env","func","json","BOLD","create","UNBOLD","BLUE","GREY","GREEN","RED","PURPLE","ORANGE","UNCOLOR","computeNoColorLoggingArgs","args","length","constructor","Function","strBuilder","logArgs","i","arg","undefined","String","Number","push","Object","join","Symbol","loggingColors","nextColor","lastLoggingTime","getUnixTime","createModuleLogger","_print","moduleName","color","debugRegexVar","getVariable","doLogging","RegExp","test","nop","timeNow","timeDiff","map","Uint8Array","Array","from","t","stringify"],"sources":["/Users/cmahidhrahrajendran/Projects/YJS-trial/frontend/node_modules/lib0/logging.common.js"],"sourcesContent":["import * as symbol from './symbol.js'\nimport * as time from './time.js'\nimport * as env from './environment.js'\nimport * as func from './function.js'\nimport * as json from './json.js'\n\nexport const BOLD = symbol.create()\nexport const UNBOLD = symbol.create()\nexport const BLUE = symbol.create()\nexport const GREY = symbol.create()\nexport const GREEN = symbol.create()\nexport const RED = symbol.create()\nexport const PURPLE = symbol.create()\nexport const ORANGE = symbol.create()\nexport const UNCOLOR = symbol.create()\n\n/* c8 ignore start */\n/**\n * @param {Array<undefined|string|Symbol|Object|number|function():any>} args\n * @return {Array<string|object|number|undefined>}\n */\nexport const computeNoColorLoggingArgs = args => {\n  if (args.length === 1 && args[0]?.constructor === Function) {\n    args = /** @type {Array<string|Symbol|Object|number>} */ (/** @type {[function]} */ (args)[0]())\n  }\n  const strBuilder = []\n  const logArgs = []\n  // try with formatting until we find something unsupported\n  let i = 0\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    if (arg === undefined) {\n      break\n    } else if (arg.constructor === String || arg.constructor === Number) {\n      strBuilder.push(arg)\n    } else if (arg.constructor === Object) {\n      break\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs.push(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n/* c8 ignore stop */\n\nconst loggingColors = [GREEN, PURPLE, ORANGE, BLUE]\nlet nextColor = 0\nlet lastLoggingTime = time.getUnixTime()\n\n/* c8 ignore start */\n/**\n * @param {function(...any):void} _print\n * @param {string} moduleName\n * @return {function(...any):void}\n */\nexport const createModuleLogger = (_print, moduleName) => {\n  const color = loggingColors[nextColor]\n  const debugRegexVar = env.getVariable('log')\n  const doLogging = debugRegexVar !== null &&\n    (debugRegexVar === '*' || debugRegexVar === 'true' ||\n      new RegExp(debugRegexVar, 'gi').test(moduleName))\n  nextColor = (nextColor + 1) % loggingColors.length\n  moduleName += ': '\n  return !doLogging\n    ? func.nop\n    : (...args) => {\n        if (args.length === 1 && args[0]?.constructor === Function) {\n          args = args[0]()\n        }\n        const timeNow = time.getUnixTime()\n        const timeDiff = timeNow - lastLoggingTime\n        lastLoggingTime = timeNow\n        _print(\n          color,\n          moduleName,\n          UNCOLOR,\n          ...args.map((arg) => {\n            if (arg != null && arg.constructor === Uint8Array) {\n              arg = Array.from(arg)\n            }\n            const t = typeof arg\n            switch (t) {\n              case 'string':\n              case 'symbol':\n                return arg\n              default: {\n                return json.stringify(arg)\n              }\n            }\n          }),\n          color,\n          ' +' + timeDiff + 'ms'\n        )\n      }\n}\n/* c8 ignore stop */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}