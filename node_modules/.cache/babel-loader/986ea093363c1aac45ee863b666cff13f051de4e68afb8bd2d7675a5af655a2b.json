{"ast":null,"code":"/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module environment\n */\n\nimport * as map from './map.js';\nimport * as string from './string.js';\nimport * as conditions from './conditions.js';\nimport * as storage from './storage.js';\nimport * as f from './function.js';\n\n/* c8 ignore next 2 */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name) && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n\n/* c8 ignore next */\nexport const isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && !isNode;\n/* c8 ignore next 3 */\nexport const isMac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n\n/**\n * @type {Map<string,string>}\n */\nlet params;\nconst args = [];\n\n/* c8 ignore start */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create();\n      const pargs = process.argv;\n      let currParamName = null;\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i];\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '');\n          }\n          currParamName = parg;\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg);\n            currParamName = null;\n          } else {\n            args.push(parg);\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '');\n      }\n      // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create(); // eslint-disable-next-line no-undef\n      (location.search || '?').slice(1).split('&').forEach(kv => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=');\n          params.set(`--${string.fromCamelCase(key, '-')}`, value);\n          params.set(`-${string.fromCamelCase(key, '-')}`, value);\n        }\n      });\n    } else {\n      params = map.create();\n    }\n  }\n  return params;\n};\n/* c8 ignore stop */\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next */\nexport const hasParam = name => computeParams().has(name);\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* c8 ignore next 2 */\nexport const getParam = (name, defaultVal) => computeParams().get(name) || defaultVal;\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 4 */\nexport const getVariable = name => isNode ? conditions.undefinedToNull(process.env[name.toUpperCase().replaceAll('-', '_')]) : conditions.undefinedToNull(storage.varStorage.getItem(name));\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 2 */\nexport const getConf = name => computeParams().get('--' + name) || getVariable(name);\n\n/**\n * @param {string} name\n * @return {string}\n */\n/* c8 ignore next 5 */\nexport const ensureConf = name => {\n  const c = getConf(name);\n  if (c == null) throw new Error(`Expected configuration \"${name.toUpperCase().replaceAll('-', '_')}\"`);\n  return c;\n};\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next 2 */\nexport const hasConf = name => hasParam('--' + name) || getVariable(name) !== null;\n\n/* c8 ignore next */\nexport const production = hasConf('production');\n\n/* c8 ignore next 2 */\nconst forceColor = isNode && f.isOneOf(process.env.FORCE_COLOR, ['true', '1', '2']);\n\n/* c8 ignore start */\n/**\n * Color is enabled by default if the terminal supports it.\n *\n * Explicitly enable color using `--color` parameter\n * Disable color using `--no-color` parameter or using `NO_COLOR=1` environment variable.\n * `FORCE_COLOR=1` enables color and takes precedence over all.\n */\nexport const supportsColor = forceColor || !hasParam('--no-colors') &&\n// @todo deprecate --no-colors\n!hasConf('no-color') && (!isNode || process.stdout.isTTY) && (!isNode || hasParam('--color') || getVariable('COLORTERM') !== null || (getVariable('TERM') || '').includes('color'));\n/* c8 ignore stop */","map":{"version":3,"names":["map","string","conditions","storage","f","isNode","process","release","test","name","Object","prototype","toString","call","isBrowser","window","document","isMac","navigator","platform","params","args","computeParams","undefined","create","pargs","argv","currParamName","i","length","parg","set","push","location","search","slice","split","forEach","kv","key","value","fromCamelCase","hasParam","has","getParam","defaultVal","get","getVariable","undefinedToNull","env","toUpperCase","replaceAll","varStorage","getItem","getConf","ensureConf","c","Error","hasConf","production","forceColor","isOneOf","FORCE_COLOR","supportsColor","stdout","isTTY","includes"],"sources":["/Users/cmahidhrahrajendran/Projects/YJS-trial/frontend/node_modules/lib0/environment.js"],"sourcesContent":["/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module environment\n */\n\nimport * as map from './map.js'\nimport * as string from './string.js'\nimport * as conditions from './conditions.js'\nimport * as storage from './storage.js'\nimport * as f from './function.js'\n\n/* c8 ignore next 2 */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name) && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n\n/* c8 ignore next */\nexport const isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && !isNode\n/* c8 ignore next 3 */\nexport const isMac = typeof navigator !== 'undefined'\n  ? /Mac/.test(navigator.platform)\n  : false\n\n/**\n * @type {Map<string,string>}\n */\nlet params\nconst args = []\n\n/* c8 ignore start */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create()\n      const pargs = process.argv\n      let currParamName = null\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i]\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '')\n          }\n          currParamName = parg\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg)\n            currParamName = null\n          } else {\n            args.push(parg)\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '')\n      }\n      // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create(); // eslint-disable-next-line no-undef\n      (location.search || '?').slice(1).split('&').forEach((kv) => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=')\n          params.set(`--${string.fromCamelCase(key, '-')}`, value)\n          params.set(`-${string.fromCamelCase(key, '-')}`, value)\n        }\n      })\n    } else {\n      params = map.create()\n    }\n  }\n  return params\n}\n/* c8 ignore stop */\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next */\nexport const hasParam = (name) => computeParams().has(name)\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* c8 ignore next 2 */\nexport const getParam = (name, defaultVal) =>\n  computeParams().get(name) || defaultVal\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 4 */\nexport const getVariable = (name) =>\n  isNode\n    ? conditions.undefinedToNull(process.env[name.toUpperCase().replaceAll('-', '_')])\n    : conditions.undefinedToNull(storage.varStorage.getItem(name))\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 2 */\nexport const getConf = (name) =>\n  computeParams().get('--' + name) || getVariable(name)\n\n/**\n * @param {string} name\n * @return {string}\n */\n/* c8 ignore next 5 */\nexport const ensureConf = (name) => {\n  const c = getConf(name)\n  if (c == null) throw new Error(`Expected configuration \"${name.toUpperCase().replaceAll('-', '_')}\"`)\n  return c\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next 2 */\nexport const hasConf = (name) =>\n  hasParam('--' + name) || getVariable(name) !== null\n\n/* c8 ignore next */\nexport const production = hasConf('production')\n\n/* c8 ignore next 2 */\nconst forceColor = isNode &&\n  f.isOneOf(process.env.FORCE_COLOR, ['true', '1', '2'])\n\n/* c8 ignore start */\n/**\n * Color is enabled by default if the terminal supports it.\n *\n * Explicitly enable color using `--color` parameter\n * Disable color using `--no-color` parameter or using `NO_COLOR=1` environment variable.\n * `FORCE_COLOR=1` enables color and takes precedence over all.\n */\nexport const supportsColor = forceColor || (\n  !hasParam('--no-colors') && // @todo deprecate --no-colors\n  !hasConf('no-color') &&\n  (!isNode || process.stdout.isTTY) && (\n    !isNode ||\n    hasParam('--color') ||\n    getVariable('COLORTERM') !== null ||\n    (getVariable('TERM') || '').includes('color')\n  )\n)\n/* c8 ignore stop */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}