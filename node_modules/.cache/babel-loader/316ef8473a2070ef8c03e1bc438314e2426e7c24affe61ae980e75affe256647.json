{"ast":null,"code":"/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\n\nimport * as string from './string.js';\nimport * as env from './environment.js';\nimport * as array from './array.js';\nimport * as math from './math.js';\nimport * as encoding from './encoding.js';\nimport * as decoding from './decoding.js';\n\n/**\n * @param {number} len\n */\nexport const createUint8ArrayFromLen = len => new Uint8Array(len);\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length);\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer);\n\n/* c8 ignore start */\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Browser = bytes => {\n  let s = '';\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i]);\n  }\n  // eslint-disable-next-line no-undef\n  return btoa(s);\n};\n/* c8 ignore stop */\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64');\n\n/* c8 ignore start */\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s);\n  const bytes = createUint8ArrayFromLen(a.length);\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i);\n  }\n  return bytes;\n};\n/* c8 ignore stop */\n\n/**\n * @param {string} s\n */\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64');\n  return createUint8ArrayViewFromArrayBuffer(buf.buffer, buf.byteOffset, buf.byteLength);\n};\n\n/* c8 ignore next */\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node;\n\n/* c8 ignore next */\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node;\n\n/**\n * Implements base64url - see https://datatracker.ietf.org/doc/html/rfc4648#section-5\n * @param {Uint8Array} buf\n */\nexport const toBase64UrlEncoded = buf => toBase64(buf).replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '');\n\n/**\n * @param {string} base64\n */\nexport const fromBase64UrlEncoded = base64 => fromBase64(base64.replaceAll('-', '+').replaceAll('_', '/'));\n\n/**\n * Base64 is always a more efficient choice. This exists for utility purposes only.\n *\n * @param {Uint8Array} buf\n */\nexport const toHexString = buf => array.map(buf, b => b.toString(16).padStart(2, '0')).join('');\n\n/**\n * Note: This function expects that the hex doesn't start with 0x..\n *\n * @param {string} hex\n */\nexport const fromHexString = hex => {\n  const hlen = hex.length;\n  const buf = new Uint8Array(math.ceil(hlen / 2));\n  for (let i = 0; i < hlen; i += 2) {\n    buf[buf.length - i / 2 - 1] = Number.parseInt(hex.slice(hlen - i - 2, hlen - i), 16);\n  }\n  return buf;\n};\n\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength);\n  newBuf.set(uint8Array);\n  return newBuf;\n};\n\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\nexport const encodeAny = data => encoding.encode(encoder => encoding.writeAny(encoder, data));\n\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf));\n\n/**\n * Shift Byte Array {N} bits to the left. Does not expand byte array.\n *\n * @param {Uint8Array} bs\n * @param {number} N should be in the range of [0-7]\n */\nexport const shiftNBitsLeft = (bs, N) => {\n  if (N === 0) return bs;\n  bs = new Uint8Array(bs);\n  bs[0] <<= N;\n  for (let i = 1; i < bs.length; i++) {\n    bs[i - 1] |= bs[i] >>> 8 - N;\n    bs[i] <<= N;\n  }\n  return bs;\n};","map":{"version":3,"names":["string","env","array","math","encoding","decoding","createUint8ArrayFromLen","len","Uint8Array","createUint8ArrayViewFromArrayBuffer","buffer","byteOffset","length","createUint8ArrayFromArrayBuffer","toBase64Browser","bytes","s","i","byteLength","fromCharCode","btoa","toBase64Node","Buffer","from","toString","fromBase64Browser","a","atob","charCodeAt","fromBase64Node","buf","toBase64","isBrowser","fromBase64","toBase64UrlEncoded","replaceAll","fromBase64UrlEncoded","base64","toHexString","map","b","padStart","join","fromHexString","hex","hlen","ceil","Number","parseInt","slice","copyUint8Array","uint8Array","newBuf","set","encodeAny","data","encode","encoder","writeAny","decodeAny","readAny","createDecoder","shiftNBitsLeft","bs","N"],"sources":["/Users/cmahidhrahrajendran/Projects/YJS-trial/frontend/node_modules/lib0/buffer.js"],"sourcesContent":["/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\n\nimport * as string from './string.js'\nimport * as env from './environment.js'\nimport * as array from './array.js'\nimport * as math from './math.js'\nimport * as encoding from './encoding.js'\nimport * as decoding from './decoding.js'\n\n/**\n * @param {number} len\n */\nexport const createUint8ArrayFromLen = len => new Uint8Array(len)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer)\n\n/* c8 ignore start */\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Browser = bytes => {\n  let s = ''\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i])\n  }\n  // eslint-disable-next-line no-undef\n  return btoa(s)\n}\n/* c8 ignore stop */\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64')\n\n/* c8 ignore start */\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s)\n  const bytes = createUint8ArrayFromLen(a.length)\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i)\n  }\n  return bytes\n}\n/* c8 ignore stop */\n\n/**\n * @param {string} s\n */\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64')\n  return createUint8ArrayViewFromArrayBuffer(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n\n/* c8 ignore next */\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node\n\n/* c8 ignore next */\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node\n\n/**\n * Implements base64url - see https://datatracker.ietf.org/doc/html/rfc4648#section-5\n * @param {Uint8Array} buf\n */\nexport const toBase64UrlEncoded = buf => toBase64(buf).replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '')\n\n/**\n * @param {string} base64\n */\nexport const fromBase64UrlEncoded = base64 => fromBase64(base64.replaceAll('-', '+').replaceAll('_', '/'))\n\n/**\n * Base64 is always a more efficient choice. This exists for utility purposes only.\n *\n * @param {Uint8Array} buf\n */\nexport const toHexString = buf => array.map(buf, b => b.toString(16).padStart(2, '0')).join('')\n\n/**\n * Note: This function expects that the hex doesn't start with 0x..\n *\n * @param {string} hex\n */\nexport const fromHexString = hex => {\n  const hlen = hex.length\n  const buf = new Uint8Array(math.ceil(hlen / 2))\n  for (let i = 0; i < hlen; i += 2) {\n    buf[buf.length - i / 2 - 1] = Number.parseInt(hex.slice(hlen - i - 2, hlen - i), 16)\n  }\n  return buf\n}\n\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength)\n  newBuf.set(uint8Array)\n  return newBuf\n}\n\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\nexport const encodeAny = data =>\n  encoding.encode(encoder => encoding.writeAny(encoder, data))\n\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf))\n\n/**\n * Shift Byte Array {N} bits to the left. Does not expand byte array.\n *\n * @param {Uint8Array} bs\n * @param {number} N should be in the range of [0-7]\n */\nexport const shiftNBitsLeft = (bs, N) => {\n  if (N === 0) return bs\n  bs = new Uint8Array(bs)\n  bs[0] <<= N\n  for (let i = 1; i < bs.length; i++) {\n    bs[i - 1] |= bs[i] >>> (8 - N)\n    bs[i] <<= N\n  }\n  return bs\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}