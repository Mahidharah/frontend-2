{"ast":null,"code":"import * as cmView from '@codemirror/view';\nimport * as cmState from '@codemirror/state';\nimport * as dom from 'lib0/dom';\nimport * as pair from 'lib0/pair';\nimport * as math from 'lib0/math';\nimport * as Y from 'yjs';\nimport { ySyncFacet } from './y-sync.js';\nexport const yRemoteSelectionsTheme = cmView.EditorView.baseTheme({\n  '.cm-ySelection': {},\n  '.cm-yLineSelection': {\n    padding: 0,\n    margin: '0px 2px 0px 4px'\n  },\n  '.cm-ySelectionCaret': {\n    position: 'relative',\n    borderLeft: '1px solid black',\n    borderRight: '1px solid black',\n    marginLeft: '-1px',\n    marginRight: '-1px',\n    boxSizing: 'border-box',\n    display: 'inline'\n  },\n  '.cm-ySelectionCaretDot': {\n    borderRadius: '50%',\n    position: 'absolute',\n    width: '.4em',\n    height: '.4em',\n    top: '-.2em',\n    left: '-.2em',\n    backgroundColor: 'inherit',\n    transition: 'transform .3s ease-in-out',\n    boxSizing: 'border-box'\n  },\n  '.cm-ySelectionCaret:hover > .cm-ySelectionCaretDot': {\n    transformOrigin: 'bottom center',\n    transform: 'scale(0)'\n  },\n  '.cm-ySelectionInfo': {\n    position: 'absolute',\n    top: '-1.05em',\n    left: '-1px',\n    fontSize: '.75em',\n    fontFamily: 'serif',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    lineHeight: 'normal',\n    userSelect: 'none',\n    color: 'white',\n    paddingLeft: '2px',\n    paddingRight: '2px',\n    zIndex: 101,\n    transition: 'opacity .3s ease-in-out',\n    backgroundColor: 'inherit',\n    // these should be separate\n    opacity: 0,\n    transitionDelay: '0s',\n    whiteSpace: 'nowrap'\n  },\n  '.cm-ySelectionCaret:hover > .cm-ySelectionInfo': {\n    opacity: 1,\n    transitionDelay: '0s'\n  }\n});\n\n/**\n * @todo specify the users that actually changed. Currently, we recalculate positions for every user.\n * @type {cmState.AnnotationType<Array<number>>}\n */\nconst yRemoteSelectionsAnnotation = cmState.Annotation.define();\nclass YRemoteCaretWidget extends cmView.WidgetType {\n  /**\n   * @param {string} color\n   * @param {string} name\n   */\n  constructor(color, name) {\n    super();\n    this.color = color;\n    this.name = name;\n  }\n  toDOM() {\n    return /** @type {HTMLElement} */dom.element('span', [pair.create('class', 'cm-ySelectionCaret'), pair.create('style', `background-color: ${this.color}; border-color: ${this.color}`)], [dom.text('\\u2060'), dom.element('div', [pair.create('class', 'cm-ySelectionCaretDot')]), dom.text('\\u2060'), dom.element('div', [pair.create('class', 'cm-ySelectionInfo')], [dom.text(this.name)]), dom.text('\\u2060')]);\n  }\n  eq(widget) {\n    return widget.color === this.color;\n  }\n  compare(widget) {\n    return widget.color === this.color;\n  }\n  updateDOM() {\n    return false;\n  }\n  get estimatedHeight() {\n    return -1;\n  }\n  ignoreEvent() {\n    return true;\n  }\n}\nexport class YRemoteSelectionsPluginValue {\n  /**\n   * @param {cmView.EditorView} view\n   */\n  constructor(view) {\n    this.conf = view.state.facet(ySyncFacet);\n    this._listener = ({\n      added,\n      updated,\n      removed\n    }, s, t) => {\n      const clients = added.concat(updated).concat(removed);\n      if (clients.findIndex(id => id !== this.conf.awareness.doc.clientID) >= 0) {\n        view.dispatch({\n          annotations: [yRemoteSelectionsAnnotation.of([])]\n        });\n      }\n    };\n    this._awareness = this.conf.awareness;\n    this._awareness.on('change', this._listener);\n    /**\n     * @type {cmView.DecorationSet}\n     */\n    this.decorations = cmState.RangeSet.of([]);\n  }\n  destroy() {\n    this._awareness.off('change', this._listener);\n  }\n\n  /**\n   * @param {cmView.ViewUpdate} update\n   */\n  update(update) {\n    const ytext = this.conf.ytext;\n    const ydoc = /** @type {Y.Doc} */ytext.doc;\n    const awareness = this.conf.awareness;\n    /**\n     * @type {Array<cmState.Range<cmView.Decoration>>}\n     */\n    const decorations = [];\n    const localAwarenessState = this.conf.awareness.getLocalState();\n\n    // set local awareness state (update cursors)\n    if (localAwarenessState != null) {\n      const hasFocus = update.view.hasFocus && update.view.dom.ownerDocument.hasFocus();\n      const sel = hasFocus ? update.state.selection.main : null;\n      const currentAnchor = localAwarenessState.cursor == null ? null : Y.createRelativePositionFromJSON(localAwarenessState.cursor.anchor);\n      const currentHead = localAwarenessState.cursor == null ? null : Y.createRelativePositionFromJSON(localAwarenessState.cursor.head);\n      if (sel != null) {\n        const anchor = Y.createRelativePositionFromTypeIndex(ytext, sel.anchor);\n        const head = Y.createRelativePositionFromTypeIndex(ytext, sel.head);\n        if (localAwarenessState.cursor == null || !Y.compareRelativePositions(currentAnchor, anchor) || !Y.compareRelativePositions(currentHead, head)) {\n          awareness.setLocalStateField('cursor', {\n            anchor,\n            head\n          });\n        }\n      } else if (localAwarenessState.cursor != null && hasFocus) {\n        awareness.setLocalStateField('cursor', null);\n      }\n    }\n\n    // update decorations (remote selections)\n    awareness.getStates().forEach((state, clientid) => {\n      if (clientid === awareness.doc.clientID) {\n        return;\n      }\n      const cursor = state.cursor;\n      if (cursor == null || cursor.anchor == null || cursor.head == null) {\n        return;\n      }\n      const anchor = Y.createAbsolutePositionFromRelativePosition(cursor.anchor, ydoc);\n      const head = Y.createAbsolutePositionFromRelativePosition(cursor.head, ydoc);\n      if (anchor == null || head == null || anchor.type !== ytext || head.type !== ytext) {\n        return;\n      }\n      const {\n        color = '#30bced',\n        name = 'Anonymous'\n      } = state.user || {};\n      const colorLight = state.user && state.user.colorLight || color + '33';\n      const start = math.min(anchor.index, head.index);\n      const end = math.max(anchor.index, head.index);\n      const startLine = update.view.state.doc.lineAt(start);\n      const endLine = update.view.state.doc.lineAt(end);\n      if (startLine.number === endLine.number) {\n        // selected content in a single line.\n        decorations.push({\n          from: start,\n          to: end,\n          value: cmView.Decoration.mark({\n            attributes: {\n              style: `background-color: ${colorLight}`\n            },\n            class: 'cm-ySelection'\n          })\n        });\n      } else {\n        // selected content in multiple lines\n        // first, render text-selection in the first line\n        decorations.push({\n          from: start,\n          to: startLine.from + startLine.length,\n          value: cmView.Decoration.mark({\n            attributes: {\n              style: `background-color: ${colorLight}`\n            },\n            class: 'cm-ySelection'\n          })\n        });\n        // render text-selection in the last line\n        decorations.push({\n          from: endLine.from,\n          to: end,\n          value: cmView.Decoration.mark({\n            attributes: {\n              style: `background-color: ${colorLight}`\n            },\n            class: 'cm-ySelection'\n          })\n        });\n        for (let i = startLine.number + 1; i < endLine.number; i++) {\n          const linePos = update.view.state.doc.line(i).from;\n          decorations.push({\n            from: linePos,\n            to: linePos,\n            value: cmView.Decoration.line({\n              attributes: {\n                style: `background-color: ${colorLight}`,\n                class: 'cm-yLineSelection'\n              }\n            })\n          });\n        }\n      }\n      decorations.push({\n        from: head.index,\n        to: head.index,\n        value: cmView.Decoration.widget({\n          side: head.index - anchor.index > 0 ? -1 : 1,\n          // the local cursor should be rendered outside the remote selection\n          block: false,\n          widget: new YRemoteCaretWidget(color, name)\n        })\n      });\n    });\n    this.decorations = cmView.Decoration.set(decorations, true);\n  }\n}\nexport const yRemoteSelections = cmView.ViewPlugin.fromClass(YRemoteSelectionsPluginValue, {\n  decorations: v => v.decorations\n});","map":{"version":3,"names":["cmView","cmState","dom","pair","math","Y","ySyncFacet","yRemoteSelectionsTheme","EditorView","baseTheme","padding","margin","position","borderLeft","borderRight","marginLeft","marginRight","boxSizing","display","borderRadius","width","height","top","left","backgroundColor","transition","transformOrigin","transform","fontSize","fontFamily","fontStyle","fontWeight","lineHeight","userSelect","color","paddingLeft","paddingRight","zIndex","opacity","transitionDelay","whiteSpace","yRemoteSelectionsAnnotation","Annotation","define","YRemoteCaretWidget","WidgetType","constructor","name","toDOM","element","create","text","eq","widget","compare","updateDOM","estimatedHeight","ignoreEvent","YRemoteSelectionsPluginValue","view","conf","state","facet","_listener","added","updated","removed","s","t","clients","concat","findIndex","id","awareness","doc","clientID","dispatch","annotations","of","_awareness","on","decorations","RangeSet","destroy","off","update","ytext","ydoc","localAwarenessState","getLocalState","hasFocus","ownerDocument","sel","selection","main","currentAnchor","cursor","createRelativePositionFromJSON","anchor","currentHead","head","createRelativePositionFromTypeIndex","compareRelativePositions","setLocalStateField","getStates","forEach","clientid","createAbsolutePositionFromRelativePosition","type","user","colorLight","start","min","index","end","max","startLine","lineAt","endLine","number","push","from","to","value","Decoration","mark","attributes","style","class","length","i","linePos","line","side","block","set","yRemoteSelections","ViewPlugin","fromClass","v"],"sources":["/Users/cmahidhrahrajendran/Projects/YJS-trial/frontend/node_modules/y-codemirror.next/src/y-remote-selections.js"],"sourcesContent":["\nimport * as cmView from '@codemirror/view'\n\nimport * as cmState from '@codemirror/state'\nimport * as dom from 'lib0/dom'\nimport * as pair from 'lib0/pair'\nimport * as math from 'lib0/math'\n\nimport * as Y from 'yjs'\nimport { ySyncFacet } from './y-sync.js'\n\nexport const yRemoteSelectionsTheme = cmView.EditorView.baseTheme({\n  '.cm-ySelection': {\n  },\n  '.cm-yLineSelection': {\n    padding: 0,\n    margin: '0px 2px 0px 4px'\n  },\n  '.cm-ySelectionCaret': {\n    position: 'relative',\n    borderLeft: '1px solid black',\n    borderRight: '1px solid black',\n    marginLeft: '-1px',\n    marginRight: '-1px',\n    boxSizing: 'border-box',\n    display: 'inline'\n  },\n  '.cm-ySelectionCaretDot': {\n    borderRadius: '50%',\n    position: 'absolute',\n    width: '.4em',\n    height: '.4em',\n    top: '-.2em',\n    left: '-.2em',\n    backgroundColor: 'inherit',\n    transition: 'transform .3s ease-in-out',\n    boxSizing: 'border-box'\n  },\n  '.cm-ySelectionCaret:hover > .cm-ySelectionCaretDot': {\n    transformOrigin: 'bottom center',\n    transform: 'scale(0)'\n  },\n  '.cm-ySelectionInfo': {\n    position: 'absolute',\n    top: '-1.05em',\n    left: '-1px',\n    fontSize: '.75em',\n    fontFamily: 'serif',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    lineHeight: 'normal',\n    userSelect: 'none',\n    color: 'white',\n    paddingLeft: '2px',\n    paddingRight: '2px',\n    zIndex: 101,\n    transition: 'opacity .3s ease-in-out',\n    backgroundColor: 'inherit',\n    // these should be separate\n    opacity: 0,\n    transitionDelay: '0s',\n    whiteSpace: 'nowrap'\n  },\n  '.cm-ySelectionCaret:hover > .cm-ySelectionInfo': {\n    opacity: 1,\n    transitionDelay: '0s'\n  }\n})\n\n/**\n * @todo specify the users that actually changed. Currently, we recalculate positions for every user.\n * @type {cmState.AnnotationType<Array<number>>}\n */\nconst yRemoteSelectionsAnnotation = cmState.Annotation.define()\n\nclass YRemoteCaretWidget extends cmView.WidgetType {\n  /**\n   * @param {string} color\n   * @param {string} name\n   */\n  constructor (color, name) {\n    super()\n    this.color = color\n    this.name = name\n  }\n\n  toDOM () {\n    return /** @type {HTMLElement} */ (dom.element('span', [pair.create('class', 'cm-ySelectionCaret'), pair.create('style', `background-color: ${this.color}; border-color: ${this.color}`)], [\n      dom.text('\\u2060'),\n      dom.element('div', [\n        pair.create('class', 'cm-ySelectionCaretDot')\n      ]),\n      dom.text('\\u2060'),\n      dom.element('div', [\n        pair.create('class', 'cm-ySelectionInfo')\n      ], [\n        dom.text(this.name)\n      ]),\n      dom.text('\\u2060')\n    ]))\n  }\n\n  eq (widget) {\n    return widget.color === this.color\n  }\n\n  compare (widget) {\n    return widget.color === this.color\n  }\n\n  updateDOM () {\n    return false\n  }\n\n  get estimatedHeight () { return -1 }\n\n  ignoreEvent () {\n    return true\n  }\n}\n\nexport class YRemoteSelectionsPluginValue {\n  /**\n   * @param {cmView.EditorView} view\n   */\n  constructor (view) {\n    this.conf = view.state.facet(ySyncFacet)\n    this._listener = ({ added, updated, removed }, s, t) => {\n      const clients = added.concat(updated).concat(removed)\n      if (clients.findIndex(id => id !== this.conf.awareness.doc.clientID) >= 0) {\n        view.dispatch({ annotations: [yRemoteSelectionsAnnotation.of([])] })\n      }\n    }\n    this._awareness = this.conf.awareness\n    this._awareness.on('change', this._listener)\n    /**\n     * @type {cmView.DecorationSet}\n     */\n    this.decorations = cmState.RangeSet.of([])\n  }\n\n  destroy () {\n    this._awareness.off('change', this._listener)\n  }\n\n  /**\n   * @param {cmView.ViewUpdate} update\n   */\n  update (update) {\n    const ytext = this.conf.ytext\n    const ydoc = /** @type {Y.Doc} */ (ytext.doc)\n    const awareness = this.conf.awareness\n    /**\n     * @type {Array<cmState.Range<cmView.Decoration>>}\n     */\n    const decorations = []\n    const localAwarenessState = this.conf.awareness.getLocalState()\n\n    // set local awareness state (update cursors)\n    if (localAwarenessState != null) {\n      const hasFocus = update.view.hasFocus && update.view.dom.ownerDocument.hasFocus()\n      const sel = hasFocus ? update.state.selection.main : null\n      const currentAnchor = localAwarenessState.cursor == null ? null : Y.createRelativePositionFromJSON(localAwarenessState.cursor.anchor)\n      const currentHead = localAwarenessState.cursor == null ? null : Y.createRelativePositionFromJSON(localAwarenessState.cursor.head)\n\n      if (sel != null) {\n        const anchor = Y.createRelativePositionFromTypeIndex(ytext, sel.anchor)\n        const head = Y.createRelativePositionFromTypeIndex(ytext, sel.head)\n        if (localAwarenessState.cursor == null || !Y.compareRelativePositions(currentAnchor, anchor) || !Y.compareRelativePositions(currentHead, head)) {\n          awareness.setLocalStateField('cursor', {\n            anchor,\n            head\n          })\n        }\n      } else if (localAwarenessState.cursor != null && hasFocus) {\n        awareness.setLocalStateField('cursor', null)\n      }\n    }\n\n    // update decorations (remote selections)\n    awareness.getStates().forEach((state, clientid) => {\n      if (clientid === awareness.doc.clientID) {\n        return\n      }\n      const cursor = state.cursor\n      if (cursor == null || cursor.anchor == null || cursor.head == null) {\n        return\n      }\n      const anchor = Y.createAbsolutePositionFromRelativePosition(cursor.anchor, ydoc)\n      const head = Y.createAbsolutePositionFromRelativePosition(cursor.head, ydoc)\n      if (anchor == null || head == null || anchor.type !== ytext || head.type !== ytext) {\n        return\n      }\n      const { color = '#30bced', name = 'Anonymous' } = state.user || {}\n      const colorLight = (state.user && state.user.colorLight) || color + '33'\n      const start = math.min(anchor.index, head.index)\n      const end = math.max(anchor.index, head.index)\n      const startLine = update.view.state.doc.lineAt(start)\n      const endLine = update.view.state.doc.lineAt(end)\n      if (startLine.number === endLine.number) {\n        // selected content in a single line.\n        decorations.push({\n          from: start,\n          to: end,\n          value: cmView.Decoration.mark({\n            attributes: { style: `background-color: ${colorLight}` },\n            class: 'cm-ySelection'\n          })\n        })\n      } else {\n        // selected content in multiple lines\n        // first, render text-selection in the first line\n        decorations.push({\n          from: start,\n          to: startLine.from + startLine.length,\n          value: cmView.Decoration.mark({\n            attributes: { style: `background-color: ${colorLight}` },\n            class: 'cm-ySelection'\n          })\n        })\n        // render text-selection in the last line\n        decorations.push({\n          from: endLine.from,\n          to: end,\n          value: cmView.Decoration.mark({\n            attributes: { style: `background-color: ${colorLight}` },\n            class: 'cm-ySelection'\n          })\n        })\n        for (let i = startLine.number + 1; i < endLine.number; i++) {\n          const linePos = update.view.state.doc.line(i).from\n          decorations.push({\n            from: linePos,\n            to: linePos,\n            value: cmView.Decoration.line({\n              attributes: { style: `background-color: ${colorLight}`, class: 'cm-yLineSelection' }\n            })\n          })\n        }\n      }\n      decorations.push({\n        from: head.index,\n        to: head.index,\n        value: cmView.Decoration.widget({\n          side: head.index - anchor.index > 0 ? -1 : 1, // the local cursor should be rendered outside the remote selection\n          block: false,\n          widget: new YRemoteCaretWidget(color, name)\n        })\n      })\n    })\n    this.decorations = cmView.Decoration.set(decorations, true)\n  }\n}\n\nexport const yRemoteSelections = cmView.ViewPlugin.fromClass(YRemoteSelectionsPluginValue, {\n  decorations: v => v.decorations\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}